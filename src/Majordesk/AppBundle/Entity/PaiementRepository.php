<?php

namespace Majordesk\AppBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * PaiementRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PaiementRepository extends EntityRepository
{
	/**
	 * @return query_builder des
	 */
	public function getDescPaiements($id_famille)
	{
		$qb = $this->createQueryBuilder('p')
				   ->join('p.famille', 'f')
				   ->where('f.id = :id_famille')
				   ->setParameter('id_famille', $id_famille)
				   ->orderBy('p.datePaiement','DESC');
			
		return $qb->getQuery()
			      ->getResult();
	}
	
	/**
	 * @return query_builder des
	 */
	public function getDescPaiementsLimit($id_famille, $lim)
	{
		$qb = $this->createQueryBuilder('p')
				   ->join('p.famille', 'f')
				   ->where('f.id = :id_famille')
				   ->setParameter('id_famille', $id_famille)
				   ->orderBy('p.datePaiement','DESC')
				   ->setMaxResults($lim);
			
		return $qb->getQuery()
			      ->getResult();
	}
	
	/**
	 * @return query_builder des 
	 */
	public function getPaiementsByProfesseur($id_professeur)
	{
		$qb = $this->createQueryBuilder('p')
				   ->join('p.famille', 'f')
				   ->join('f.eleves', 'el')
				   ->join('el.professeurs', 'pr')
				   ->where('p.ticket IS NOT NULL')
				   ->andWhere('pr.id = :id_professeur')
				   ->setParameter('id_professeur', $id_professeur)
				   ->orderBy('p.datePaiement','DESC');
			
		return $qb->getQuery()
			      ->getResult();
	}
	
	/**
	 * @return query_builder des 
	 */
	public function getAllPaiements()
	{
		$qb = $this->createQueryBuilder('p')
				   ->orderBy('p.datePaiement','DESC');
			
		return $qb->getQuery()
			      ->getResult();
	}
	
	/**
	 * @return query_builder des 
	 */
	public function getPendingPaiements()
	{
		$date_from = new \Datetime("now", new \DateTimeZone('Europe/Paris'));
		$date_from->sub(new \DateInterval('P1M'));
		$date_from->format('Y-m-d');
	
		$qb = $this->createQueryBuilder('p')
				   ->where('p.transaction = 1 OR p.transaction = 3')
				   ->andWhere('p.datePaiement >= :date_from')
				   ->setParameter('date_from', $date_from)
				   ;
			
		return $qb->getQuery()
			      ->getResult();
	}
}
