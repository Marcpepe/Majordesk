<?php

namespace Majordesk\AppBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * CalEventRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class CalEventRepository extends EntityRepository
{
	/**
	 * @return la liste des cours aujourd'hui entre heureFin et heureDebut
	 */
	public function getEleveCalEvents($id_eleve, \Datetime $heure_from, \Datetime $heure_to)
	{
		$date_cours = $heure_from->format('Y-m-d');
	
		$qb = $this->createQueryBuilder('ce')
				   ->join('ce.eleve', 'e')
				   ->where('e.id = :id_eleve')
				   ->andWhere('ce.dateCours = :date_cours')
				   ->andWhere('ce.reservation <> 0')
				   ->andWhere('ce.ticket IS NULL')
				   ->setParameter('id_eleve', $id_eleve)
				   ->setParameter('date_cours', $date_cours);
				   
		$qb->andWhere($qb->expr()->between('ce.heureDebut', ':heure_from', ':heure_to'))
		   ->setParameter('heure_from', $heure_from, \Doctrine\DBAL\Types\Type::TIME)
		   ->setParameter('heure_to', $heure_to, \Doctrine\DBAL\Types\Type::TIME);
			
		return $qb->getQuery()
			      ->getResult();
	}
	
	/**
	 * @return la liste des cours aujourd'hui entre heureFin et heureDebut
	 */
	public function getEleveCalEventsQb($id_eleve, \Datetime $heure_from, \Datetime $heure_to)
	{
		$date_cours = $heure_from->format('Y-m-d');
	
		$qb = $this->createQueryBuilder('ce')
				   ->join('ce.eleve', 'e')
				   ->where('e.id = :id_eleve')
				   ->andWhere('ce.dateCours = :date_cours')
				   ->andWhere('ce.reservation <> 0')
				   ->andWhere('ce.ticket IS NULL')
				   ->setParameter('id_eleve', $id_eleve)
				   ->setParameter('date_cours', $date_cours);
				   
		$qb->andWhere($qb->expr()->between('ce.heureDebut', ':heure_from', ':heure_to'))
		   ->setParameter('heure_from', $heure_from, \Doctrine\DBAL\Types\Type::TIME)
		   ->setParameter('heure_to', $heure_to, \Doctrine\DBAL\Types\Type::TIME);
			
		return $qb;
	}
	
	/**
	 * @return la liste des 
	 */
	public function getEleveCalEventsProches($id_eleve, $date_from, $date_to)
	{	
		$qb = $this->createQueryBuilder('ce')
				   ->join('ce.eleve', 'e')
				   ->where('e.id = :id_eleve')
				   ->andWhere('ce.reservation <> 0')
				   ->andWhere('ce.reservation <> 3')
				   ->andWhere('ce.ticket IS NULL')
				   ->setParameter('id_eleve', $id_eleve)
				   ->orderBy('ce.dateCours','ASC')
				   ->addOrderBy('ce.heureDebut','ASC');
		
		$qb->andWhere($qb->expr()->between('ce.dateCours', ':date_from', ':date_to'))
		   ->setParameter('date_from', $date_from, \Doctrine\DBAL\Types\Type::DATE)
		   ->setParameter('date_to', $date_to, \Doctrine\DBAL\Types\Type::DATE);
		$qb->andWhere('ce.heureDebut > :heure_from')
		   ->setParameter('heure_from', $date_from, \Doctrine\DBAL\Types\Type::TIME);
			
		return $qb->getQuery()
			      ->getResult();
	}
	
	/**
	 * @return la liste des 
	 */
	public function getFamilleCalEventsProches($id_famille, $date_from, $date_to)
	{	
		$qb = $this->createQueryBuilder('ce')
				   ->join('ce.eleve', 'e')
				   ->join('e.famille', 'f')
				   ->where('f.id = :id_famille')
				   ->andWhere('ce.reservation <> 0')
				   ->andWhere('ce.ticket IS NULL')
				   ->setParameter('id_famille', $id_famille)
				   ->orderBy('ce.dateCours','ASC')
				   ->addOrderBy('ce.heureDebut','ASC');
		
		$qb->andWhere($qb->expr()->between('ce.dateCours', ':date_from', ':date_to'))
		   ->setParameter('date_from', $date_from, \Doctrine\DBAL\Types\Type::DATE)
		   ->setParameter('date_to', $date_to, \Doctrine\DBAL\Types\Type::DATE);
		$qb->andWhere('ce.heureDebut > :heure_from')
		   ->setParameter('heure_from', $date_from, \Doctrine\DBAL\Types\Type::TIME);
			
		return $qb->getQuery()
			      ->getResult();
	}
	
	/**
	 * @return la liste des 
	 */
	public function getProfesseurCalEventsProches($id_professeur, $date_from, $date_to)
	{
		$qb = $this->createQueryBuilder('ce')
				   ->join('ce.professeur', 'p')
				   ->where('p.id = :id_professeur')
				   ->andWhere('ce.reservation <> 0')
				   ->andWhere('ce.ticket IS NULL')
				   ->setParameter('id_professeur', $id_professeur)
				   ->orderBy('ce.dateCours','ASC')
				   ->addOrderBy('ce.heureDebut','ASC');
		
		$qb->andWhere($qb->expr()->between('ce.dateCours', ':date_from', ':date_to'))
		   ->setParameter('date_from', $date_from, \Doctrine\DBAL\Types\Type::DATE)
		   ->setParameter('date_to', $date_to, \Doctrine\DBAL\Types\Type::DATE);
			
		return $qb->getQuery()
			      ->getResult();
	}
	
	/**
	 * @return la liste des 
	 */
	public function getProfesseurCalEvents($id_professeur, $date_from, $date_to)
	{
		$qb = $this->createQueryBuilder('ce')
				   ->join('ce.professeur', 'p')
				   ->where('p.id = :id_professeur')
				   ->andWhere('ce.reservation <> 0')
				   ->setParameter('id_professeur', $id_professeur)
				   ->orderBy('ce.dateCours','ASC')
				   ->addOrderBy('ce.heureDebut','ASC');
		
		$qb->andWhere($qb->expr()->between('ce.dateCours', ':date_from', ':date_to'))
		   ->setParameter('date_from', $date_from, \Doctrine\DBAL\Types\Type::DATE)
		   ->setParameter('date_to', $date_to, \Doctrine\DBAL\Types\Type::DATE);
			
		return $qb->getQuery()
			      ->getResult();
	}
	
	/**
	 * @return la liste de tous les événements du calendrier de cet élève
	 */
	public function getAllEleveCalEvents($id_eleve)
	{
		$qb = $this->createQueryBuilder('ce')
				   ->join('ce.eleve', 'e')
				   ->where('e.id = :id_eleve')
				   ->andWhere('ce.reservation <> 0')
				   ->setParameter('id_eleve', $id_eleve)
				   ->orderBy('ce.dateCours','ASC')
				   ->addOrderBy('ce.heureDebut','ASC');
			
		return $qb->getQuery()
			      ->getResult();
	}
	
	/**
	 * @return la liste de tous les événements du calendrier de cet élève
	 */
	public function getAllFamilleCalEvents($id_famille)
	{
		$qb = $this->createQueryBuilder('ce')
				   ->join('ce.eleve', 'e')
				   ->join('e.famille', 'f')
				   ->where('f.id = :id_famille')
				   ->andWhere('ce.reservation <> 0')
				   ->setParameter('id_famille', $id_famille)
				   ->orderBy('ce.dateCours','ASC')
				   ->addOrderBy('ce.heureDebut','ASC');
			
		return $qb->getQuery()
			      ->getResult();
	}
	
	/**
	 * @return la liste de tous les événements du calendrier de ce professeur
	 */
	public function getAllProfesseurCalEvents($id_professeur)
	{
		$qb = $this->createQueryBuilder('ce')
				   ->join('ce.professeur', 'p')
				   ->where('p.id = :id_professeur')
				   ->andWhere('ce.reservation <> 0')
				   ->setParameter('id_professeur', $id_professeur)
				   ->orderBy('ce.dateCours','ASC')
				   ->addOrderBy('ce.heureDebut','ASC');
			
		return $qb->getQuery()
			      ->getResult();
	}
	
	/**
	 * @return la liste de tous les événements du calendrier de ce professeur
	 */
	public function getAllCalEvents()
	{
		$qb = $this->createQueryBuilder('ce')
				   ->orderBy('ce.dateCours','ASC')
				   ->addOrderBy('ce.heureDebut','ASC');
			
		return $qb->getQuery()
			      ->getResult();
	}
}
