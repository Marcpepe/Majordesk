<?php

namespace Majordesk\AppBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * ExerciceRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ExerciceRepository extends EntityRepository
{
	/**
	 * @return les devoirs à faire
	 */
	public function getDevoirs($id_eleve, $statut_resolu)
	{
		$qb = $this->createQueryBuilder('ex')
				   ->join('ex.eleve', 'el')
				   ->join('ex.mod_exercice', 'me')
				   ->join('me.chapitre', 'c')
				   ->where('el.id = :id_eleve')
				   ->andWhere('ex.statut != :statut_resolu')
				   ->andWhere('ex.selection != 0')
				   ->setParameter('id_eleve', $id_eleve)
				   ->setParameter('statut_resolu', $statut_resolu);
			
		return $qb->getQuery()
			      ->getResult();
	}
	
	/**
	 * @return les devoirs à faire
	 */
	public function getFavorisByEleve($id_eleve, $statut_resolu)
	{
		$qb = $this->createQueryBuilder('ex')
				   ->join('ex.eleve', 'el')
				   ->where('el.id = :id_eleve')
				   ->andWhere('ex.statut != :statut_resolu')
				   ->andWhere('ex.favoris = 1')
				   ->setParameter('id_eleve', $id_eleve)
				   ->setParameter('statut_resolu', $statut_resolu);
			
		return $qb->getQuery()
			      ->getResult();
	}

	/**
	 * @return 1 exercice (ou null) résolu ou mis de côté et ayant une variable sélection > 1 ou <-1 (sélection représente de nombre d'exercices à générer dans le futur dans cette partie (>1) ou ce chapitre (<-1))
	 */
	public function getSelectedExerciceResoluByChapitre($id_eleve, $id_chapitre, $statut_resolu)
	{
		$qb = $this->createQueryBuilder('ex')
				   ->join('ex.eleve', 'el')
				   ->join('ex.mod_exercice', 'me')
				   ->join('me.chapitre', 'c')
				   ->where('el.id = :id_eleve')
				   ->andWhere('c.id = :id_chapitre')
				   ->andWhere('ex.favoris = 1 OR ex.statut = :statut_resolu')
				   ->andWhere('ex.selection > 1 OR ex.selection < -1')
				   ->setParameter('id_eleve', $id_eleve)
				   ->setParameter('id_chapitre', $id_chapitre)
				   ->setParameter('statut_resolu', $statut_resolu)
				   ->orderBy('ex.date_queue', 'ASC')
				   ->setMaxResults(1);
			
		return $qb->getQuery()
			      ->getOneOrNullResult();
	}
	
	/**
	 * @return 1 exercice (ou null) résolu ou mis de côté et ayant une variable sélection > 1 ou <-1 (sélection représente de nombre d'exercices à générer dans le futur dans cette partie (>1) ou ce chapitre (<-1))
	 */
	public function getSelectedExerciceResoluByMatiere($id_eleve, $id_matiere, $statut_resolu)
	{
		$qb = $this->createQueryBuilder('ex')
				   ->join('ex.eleve', 'el')
				   ->join('ex.mod_exercice', 'me')
				   ->join('me.matiere', 'm')
				   ->where('el.id = :id_eleve')
				   ->andWhere('m.id = :id_matiere')
				   ->andWhere('ex.favoris = 1 OR ex.statut = :statut_resolu')
				   ->andWhere('ex.selection > 1 OR ex.selection < -1')
				   ->setParameter('id_eleve', $id_eleve)
				   ->setParameter('id_matiere', $id_matiere)
				   ->setParameter('statut_resolu', $statut_resolu)
				   ->orderBy('ex.date_queue', 'ASC')
				   ->setMaxResults(1);
			
		return $qb->getQuery()
			      ->getOneOrNullResult();
	}

	/**
	 * @return array des exercices d'un élève en fonction de leur appartenance à la queue, de leur priorité et de la matiere
	 */
	public function getNextExerciceInQueueByMatiere($id_eleve, $id_matiere, $en_ligne)
	{
		$today = new \Datetime("now", new \DateTimeZone('Europe/Paris'));
		$today->format('Y-m-d');
	
		$qb = $this->createQueryBuilder('ex')
				   ->join('ex.eleve', 'el')
				   ->join('ex.mod_exercice', 'me')
				   ->join('me.programme', 'p')
				   ->join('me.matiere', 'm')
				   ->where('el.id = :id_eleve')
				   ->andWhere('ex.queue > 0')
				   ->andWhere('m.id = :id_matiere')
				   ->andWhere('me.statut = :en_ligne')
				   ->andWhere('ex.favoris != 1 OR ex.date_queue < :today')
				   ->setParameter('id_eleve', $id_eleve)
				   ->setParameter('id_matiere', $id_matiere)
				   ->setParameter('en_ligne', $en_ligne)
				   ->setParameter('today', $today, \Doctrine\DBAL\Types\Type::DATE)
				   ->orderBy('ex.queue', 'DESC')
				   ->addOrderBy('ex.date_queue', 'DESC')
				   ->setMaxResults(1);
			
		return $qb->getQuery()
			      ->getOneOrNullResult();
	}
	
	/**
	 * @return array des exercices d'un élève en fonction de leur appartenance à la queue, de leur priorité et du chapitre
	 */
	public function getNextExerciceInQueueByChapitre($id_eleve, $id_chapitre, $en_ligne)
	{
		$today = new \Datetime("now", new \DateTimeZone('Europe/Paris'));
		$today->format('Y-m-d');

		$qb = $this->createQueryBuilder('ex')
				   ->join('ex.eleve', 'el')
				   ->join('ex.mod_exercice', 'me')
				   ->join('me.chapitre', 'c')
				   ->where('el.id = :id_eleve')
				   ->andWhere('ex.queue > 0')
				   ->andWhere('c.id = :id_chapitre')
				   ->andWhere('me.statut = :en_ligne')
				   ->andWhere('ex.favoris != 1 OR ex.date_queue < :today')
				   ->setParameter('id_eleve', $id_eleve)
				   ->setParameter('id_chapitre', $id_chapitre)
				   ->setParameter('en_ligne', $en_ligne)
				   ->setParameter('today', $today, \Doctrine\DBAL\Types\Type::DATE)
				   ->orderBy('ex.queue', 'DESC')
				   ->addOrderBy('ex.date_queue', 'DESC')
				   ->setMaxResults(1);
			
		return $qb->getQuery()
			      ->getOneOrNullResult();
	}
	
	/**
	 * @return array des exercices d'un élève en fonction de leur appartenance à la queue, de leur priorité et de la partie
	 */
	public function getNextExerciceInQueueByPartie($id_eleve, $id_partie, $en_ligne)
	{
		$today = new \Datetime("now", new \DateTimeZone('Europe/Paris'));
		$today->format('Y-m-d');

		$qb = $this->createQueryBuilder('ex')
				   ->join('ex.eleve', 'el')
				   ->join('ex.mod_exercice', 'me')
				   ->join('me.partie', 'p')
				   ->where('el.id = :id_eleve')
				   ->andWhere('ex.queue > 0')
				   ->andWhere('p.id = :id_partie')
				   ->andWhere('me.statut = :en_ligne')
				   ->andWhere('ex.favoris != 1 OR ex.date_queue < :today')
				   ->setParameter('id_eleve', $id_eleve)
				   ->setParameter('id_partie', $id_partie)
				   ->setParameter('en_ligne', $en_ligne)
				   ->setParameter('today', $today, \Doctrine\DBAL\Types\Type::DATE)
				   ->orderBy('ex.queue', 'DESC')
				   ->addOrderBy('ex.date_queue', 'DESC')
				   ->setMaxResults(1);
			
		return $qb->getQuery()
			      ->getOneOrNullResult();
	}

	/**
	 * @return array des exercices correspondant à un chapitre
	 */
	public function getExercicesByChapitre($id_eleve, $id_chapitre)
	{
		$qb = $this->createQueryBuilder('ex')
				   ->join('ex.mod_exercice', 'me')
				   ->join('me.chapitre', 'c')	   	 
				   ->join('ex.eleve', 'el')
				   ->where('c.id = :id_chapitre')
				   ->andWhere('el.id = :id_eleve')
				   ->setParameter('id_chapitre', $id_chapitre)
				   ->setParameter('id_eleve', $id_eleve);
			
		return $qb->getQuery()
			      ->getResult();
	}
	
	/**
	 * @return array des exercices correspondant à une partie
	 */
	public function getExercicesByPartie($id_eleve, $id_partie)
	{
		$qb = $this->createQueryBuilder('ex')
				   ->join('ex.mod_exercice', 'me')
				   ->join('me.partie', 'p')
				   ->join('ex.eleve', 'el')
				   ->where('p.id = :id_partie')		   
				   ->andWhere('el.id = :id_eleve')
				   ->setParameter('id_partie', $id_partie)
				   ->setParameter('id_eleve', $id_eleve);
			
		return $qb->getQuery()
			      ->getResult();
	}
	
	/**
	 * @return array des exercices correspondant à une partie et à un statut
	 */
	public function getExercicesByPartieByStatut($id_eleve, $id_partie, $statut)
	{
		$qb = $this->createQueryBuilder('ex')
				   ->join('ex.mod_exercice', 'me')
				   ->join('me.partie', 'p')
				   ->join('ex.eleve', 'el')
				   ->where('p.id = :id_partie')		   
				   ->andWhere('el.id = :id_eleve')
				   ->andWhere('ex.statut = :statut')
				   ->setParameter('id_partie', $id_partie)
				   ->setParameter('id_eleve', $id_eleve)
				   ->setParameter('statut', $statut);
			
		return $qb->getQuery()
			      ->getResult();
	}
	
	/**
	 * @return 1 exercice correspondant à une partie, un niveau et un statut
	 */
	public function getExerciceByPartieByNiveauByStatut($id_eleve, $id_partie, $niveau, $statut_en_ligne, $statut)
	{
		$qb = $this->createQueryBuilder('ex')
		           ->join('ex.mod_exercice', 'me')
				   ->join('me.partie', 'p')
				   ->join('ex.eleve', 'el')
				   ->where('ex.statut = :statut') 
				   ->andWhere('ex.favoris != 1')
				   ->andWhere('me.niveau = :niveau')
				   ->andWhere('me.statut = :en_ligne')
				   ->andWhere('p.id = :id_partie')
				   ->andWhere('el.id = :id_eleve')
				   ->setParameter('statut', $statut)
				   ->setParameter('niveau', $niveau)
				   ->setParameter('en_ligne', $statut_en_ligne)
				   ->setParameter('id_partie', $id_partie)				      
				   ->setParameter('id_eleve', $id_eleve)
				   ->setMaxResults(1);
			
		return $qb->getQuery()
			      ->getOneOrNullResult();
	}
	
	/**
	 * @return array des ? derniers exercices correspondant à une partie et à un élève
	 */
	public function getLastExercicesByPartie($id_eleve, $id_partie, $limit)
	{
		$qb = $this->createQueryBuilder('ex')
				   ->join('ex.mod_exercice', 'me')
				   ->join('me.partie', 'p')
				   ->join('ex.eleve', 'el')
				   ->join('ex.questions', 'q')
				   ->where('p.id = :id_partie') 
				   ->andWhere('el.id = :id_eleve')
				   ->setParameter('id_partie', $id_partie)
				   ->setParameter('id_eleve', $id_eleve)			   
				   ->orderBy('q.date_enregistrement', 'DESC')
				   ->setMaxResults($limit);
			
		return $qb->getQuery()
			      ->getResult();
	}
	
	/**
	 * @return array des ? derniers exercices correspondant à un chapitre et à un élève
	 */
	public function getLastExercicesByChapitre($id_eleve, $id_chapitre, $limit)
	{
		$qb = $this->createQueryBuilder('ex')
				   ->join('ex.mod_exercice', 'me')
				   ->join('me.chapitre', 'c')
				   ->join('ex.eleve', 'el')
				   ->join('ex.questions', 'q')
				   ->where('c.id = :id_chapitre') 
				   ->andWhere('el.id = :id_eleve')
				   ->setParameter('id_chapitre', $id_chapitre)
				   ->setParameter('id_eleve', $id_eleve)			   
				   ->orderBy('q.date_enregistrement', 'DESC')
				   ->setMaxResults($limit);
			
		return $qb->getQuery()
			      ->getResult();
	}
	
	/**
	 * @return dernier exercice correspondant à une matière et à un élève
	 */
	public function getLastExerciceByMatiere($id_eleve, $id_matiere)
	{
		$qb = $this->createQueryBuilder('ex')
				   ->join('ex.eleve', 'el')
				   ->join('ex.mod_exercice', 'me')
				   ->join('me.matiere', 'm')
				   ->join('ex.questions', 'q')
				   ->where('el.id = :id_eleve')
				   ->andWhere('m.id = :id_matiere')
				   ->setParameter('id_eleve', $id_eleve)			   
				   ->setParameter('id_matiere', $id_matiere)			   
				   ->orderBy('q.date_enregistrement', 'DESC')
				   ->setMaxResults(1);
			
		return $qb->getQuery()
			      ->getOneOrNullResult();
	}
	
	/**
	 * @return exercices faits ou entamés depuis le dernier cours
	 */
	public function getExercicesSinceLastCours($id_eleve, $id_professeur)
	{
		$qb = $this->createQueryBuilder('ex')
				   ->join('ex.eleve', 'el')
				   ->join('ex.mod_exercice', 'me')
				   ->join('me.matiere', 'm')
				   ->join('m.professeurs', 'p')
				   ->join('ex.questions', 'q')
				   ->join('el.cal_events', 'c_e')
				   ->join('c_e.ticket', 't')
				   ->where('el.id = :id_eleve')
				   ->andWhere('p.id = :id_professeur')
				   ->groupBy('q.date_enregistrement')
				   ->having('q.date_enregistrement > MAX(t.date_cours)')   // l'exercice a été tenté depuis le dernier cours
				   ->orHaving('ex.statut != 2')                            // ou bien il n'est pas résolu
				   ->setParameter('id_eleve', $id_eleve)			   
				   ->setParameter('id_professeur', $id_professeur)			   
				   ->orderBy('q.date_enregistrement', 'DESC');			   
			
		return $qb->getQuery()
			      ->getResult();
	}
	
	/**
	 * @return exercices faits ou entamés depuis le dernier cours
	 */
	public function getExercicesInMatiereSinceLastCours($id_eleve, $id_matiere) // FIXME : "..since last cours"
	{
		$qb = $this->createQueryBuilder('ex')
				   ->join('ex.eleve', 'el')
				   ->join('ex.mod_exercice', 'me')
				   ->join('me.matiere', 'm')
				   ->join('ex.questions', 'q')
				   ->join('el.cal_events', 'c_e')
				   ->join('c_e.ticket', 't')
				   ->where('el.id = :id_eleve')
				   ->andWhere('m.id = :id_matiere')
				   ->groupBy('q.date_enregistrement')
				   ->having('q.date_enregistrement > MAX(t.date_cours)')   // l'exercice a été tenté depuis le dernier cours
				   ->orHaving('ex.statut != 2')                            // ou bien il n'est pas résolu
				   ->setParameter('id_eleve', $id_eleve)			   
				   ->setParameter('id_matiere', $id_matiere)			   
				   ->orderBy('q.date_enregistrement', 'ASC');
			
		return $qb->getQuery()
			      ->getResult();
	}
	
	/**
	 * @return derniers exercices faits ou entamés
	 */
	public function getLastExercices($id_eleve, $limit)
	{
		$qb = $this->createQueryBuilder('ex')
				   ->join('ex.eleve', 'el')
				   ->join('ex.questions', 'q')
				   ->where('el.id = :id_eleve')
				   ->setParameter('id_eleve', $id_eleve)			   		   
				   ->orderBy('q.date_enregistrement', 'DESC')
				   ->setMaxResults($limit);
			
		return $qb->getQuery()
			      ->getResult();
	}
	
	/**
	 * @return dernier exercice correspondant à une matière, un chapitre et à un élève
	 */
	public function getLastExerciceInChapitreByMatiere($id_eleve, $id_chapitre)
	{
		$qb = $this->createQueryBuilder('ex')
				   ->join('ex.eleve', 'el')
				   ->join('ex.mod_exercice', 'me')
				   ->join('me.chapitre', 'c')
				   ->join('ex.questions', 'q')
				   ->where('el.id = :id_eleve')
				   ->andWhere('c.id = :id_chapitre')
				   ->setParameter('id_eleve', $id_eleve)			   		   
				   ->setParameter('id_chapitre', $id_chapitre)			   
				   ->orderBy('q.date_enregistrement', 'DESC')
				   ->setMaxResults(1);
			
		return $qb->getQuery()
			      ->getOneOrNullResult();
	}
	
	/**
	 * @return 
	 */
	public function getExercicesByEleveBetween($id_eleve, $date_debut, $date_fin)
	{
		$qb = $this->createQueryBuilder('ex')
				   ->join('ex.eleve', 'el')
				   ->where('el.id = :id_eleve')
				   ->setParameter('id_eleve', $id_eleve)
				   ;
		
		$qb->andWhere($qb->expr()->between('ex.date_queue', ':date_debut', ':date_fin'))
		   ->setParameter('date_debut', $date_debut, \Doctrine\DBAL\Types\Type::DATE)
		   ->setParameter('date_fin', $date_fin, \Doctrine\DBAL\Types\Type::DATE);
			
		return $qb->getQuery()
			      ->getResult();
	}
	
	/**
	 * @return 
	 */
	public function getExerciceByModExerciceAndEleve($id_eleve, $id_mod_exercice)
	{
		$qb = $this->createQueryBuilder('ex')
				   ->join('ex.eleve', 'el')
				   ->join('ex.mod_exercice', 'me')
				   ->where('el.id = :id_eleve')
				   ->andWhere('me.id = :id_mod_exercice')
				   ->setParameter('id_eleve', $id_eleve)
				   ->setParameter('id_mod_exercice', $id_mod_exercice)
				   ;
			
		return $qb->getQuery()
			      ->getOneOrNullResult();
	}
}
