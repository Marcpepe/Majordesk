<?php

namespace Majordesk\AppBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * ModExerciceRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ModExerciceRepository extends EntityRepository
{
	/**
	 * @return
	 */
	public function getModExercicesByPartie($id_partie)
	{
		$qb = $this->createQueryBuilder('me')
				   ->join('me.partie','p')
				   ->where('p.id = :id_partie')
				   ->setParameter('id_partie', $id_partie)
				   ;
			
		return $qb->getQuery()
			      ->getResult();
	}
	
	/**
	 * @return
	 */
	public function getOnlineModExercicesByPartie($id_partie)
	{
		$qb = $this->createQueryBuilder('me')
				   ->join('me.partie','p')
				   ->where('p.id = :id_partie')
				   ->andWhere('me.statut = 2') // online = 2, offline = 1
				   ->setParameter('id_partie', $id_partie)
				   ->setMaxResults(15)
				   ;
			
		return $qb->getQuery()
			      ->getResult();
	}
	
	/**
	 * @return
	 */
	public function getUngeneratedOnlineModExercicesByPartie($id_partie, $id_eleve) // FIXME : à faire si possible en une requête
	{
		$qb = $this->createQueryBuilder('me')
		           ->join('me.exercices', 'ex')
		           ->join('ex.eleve', 'el')
				   ->where('el.id = :id_eleve')
				   ->setParameter(':id_eleve',$id_eleve);
			
		$id_interdits = $qb->getQuery()
		                   ->getResult();
		$id_interdits[] = 0;
		
		$qb = $this->createQueryBuilder('me')
		           ->join('me.partie', 'p')
				   ->where('p.id = :id_partie')				   
				   ->andWhere('me.statut = 2')		   // online = 2, offline = 1
				   ->setParameter('id_partie', $id_partie)
				   ;
		
		$qb->andWhere($qb->expr()->notIn('me.id', ':id_interdits'))
				      ->setParameter('id_interdits', $id_interdits)
				      ->setMaxResults(15)
					  ;	   
			
		return $qb->getQuery()
			      ->getResult();
	}
	
	/**
	 * @return 
	 */
	public function getModExercicesByChapitre($id_chapitre)
	{
		$qb = $this->createQueryBuilder('me')
				   ->join('me.chapitre','c')
				   ->where('c.id = :id_chapitre')
				   ->setParameter('id_chapitre', $id_chapitre)
				   ;
			
		return $qb->getQuery()
			      ->getResult();
	}
	
	/**
	 * @return les devoirs à faire
	 */
	public function getOneTutocours($id_partie)
	{
		$qb = $this->createQueryBuilder('me')
				   ->join('me.partie','p')
				   ->where('p.id = :id_partie')
				   ->andWhere('me.niveau = 0')
				   ->setParameter('id_partie', $id_partie)
				   ->setMaxResults(1);
			
		return $qb->getQuery()
			      ->getOneOrNullResult();
	}
	
	/**
	 * @return array des exercices dont les questions et les éléments de ces questions sont ordonnés par numéros croissants
	 */
	public function getOrderedModExercice($id)
	{
		$qb = $this->createQueryBuilder('me')			   
				   ->join('me.mod_questions', 'mq')	   
				   ->join('mq.modeles_elements', 'mel')
				   ->where('me.id = :id')
				   ->setParameter('id', $id)
				   ->orderBy('mq.numero', 'ASC')
				   ->addOrderBy('mel.numero', 'ASC');		   
			
		return $qb->getQuery()
			      ->getSingleResult();
	}
	
	/**
	 * @return array des mod_exercices ayant pour statut $statut, ordonnés par date
	 */
	public function getModExercicesOrderedByDate($statut)
	{
		$qb = $this->createQueryBuilder('me')
				   ->where('me.statut = :statut')
				   ->setParameter('statut', $statut)
				   ->orderBy('me.date_enregistrement', 'DESC');
			
		return $qb->getQuery()
			      ->getResult();
	}
	
	/**
	 * @return array des mod_exercices ayant pour statut $statut, ordonnés par date
	 */
	public function getModExerciceEnCours($statut, $id)
	{
		$qb = $this->createQueryBuilder('me')
				   ->join('me.matiere', 'm')
				   ->where('m.id = :id')
				   ->andWhere('me.statut = :statut')
				   ->setParameter('id', $id)		   
				   ->setParameter('statut', $statut)
				   ->orderBy('me.date_enregistrement', 'DESC')
				   ->setMaxResults(1);
			
		return $qb->getQuery()
			      ->getOneOrNullResult();
	}
	
	/**
	 * @return array des mod_exercices ayant pour statut $statut, ordonnés par date
	 */
	public function getRandomModExerciceByPartieByNiveau($id_eleve, $id_partie, $niveau, $statut_en_ligne) // FIXME : à faire si possible en une requête
	{
		// $qb = $this->createQueryBuilder('me')
				   // ->join('me.partie', 'p')
				   // ->leftJoin('me.exercices', 'ex')
				   // ->leftJoin('ex.eleve', 'el')
				   // ->where('p.id = :id_partie')				   
				   // ->andWhere('me.statut = :statut')		   
				   // ->andWhere('me.niveau = :niveau')
				   // ->andWhere('ex IS NULL OR el IS NULL OR el.id <> :id_eleve')
				   // ->setParameter('id_partie', $id_partie)
				   // ->setParameter('statut', $statut_en_ligne)
				   // ->setParameter('niveau', $niveau)
				   // ->setParameter('id_eleve', $id_eleve)
				   // ->setMaxResults(1);
		$qb = $this->createQueryBuilder('me')
		           ->join('me.exercices', 'ex')
		           ->join('ex.eleve', 'el')
				   ->where('el.id = :id_eleve')
				   ->setParameter(':id_eleve',$id_eleve);
			
		// $mod_interdits = $qb->getQuery()
		                    // ->getResult();
			
		$id_interdits = $qb->getQuery()
		                   ->getResult();
		$id_interdits[] = 0;
		// $id_interdits = array();	
		// foreach($mod_interdits as $mod_interdit) {
			// $id_interdits[] = $mod_interdit->getId();
		// }						
		
		$qb = $this->createQueryBuilder('me')
		           ->join('me.partie', 'p')
				   ->where('p.id = :id_partie')				   
				   ->andWhere('me.statut = :statut')		   
				   ->andWhere('me.niveau = :niveau')
				   ->setParameter('id_partie', $id_partie)
				   ->setParameter('statut', $statut_en_ligne)
				   ->setParameter('niveau', $niveau);
		
		$qb->andWhere($qb->expr()->notIn('me.id', ':id_interdits'))
				      ->setParameter('id_interdits', $id_interdits)
				      ->setMaxResults(1);	   
			
		return $qb->getQuery()
			      ->getOneOrNullResult();
	}
}
